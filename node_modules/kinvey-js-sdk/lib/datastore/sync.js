"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var query_1 = require("../query");
var sync_1 = require("../errors/sync");
var notFound_1 = require("../errors/notFound");
var networkstore_1 = require("./networkstore");
var cache_1 = require("./cache");
var kinvey_1 = require("../kinvey");
var pushInProgress = new Map();
function markPushStart(collectionName) {
    pushInProgress.set(collectionName, true);
}
function markPushEnd(collectionName) {
    pushInProgress.set(collectionName, false);
    ;
}
function queryToSyncQuery(query) {
    if (query && query instanceof query_1.Query) {
        var newFilter = Object.keys(query.filter)
            .reduce(function (filter, field) {
            var _a;
            return Object.assign({}, filter, (_a = {}, _a["entity." + field] = query.filter[field], _a));
        }, {});
        var newSort = Object.keys(query.sort)
            .reduce(function (sort, field) {
            var _a;
            return Object.assign({}, sort, (_a = {}, _a["entity." + field] = query.sort[field], _a));
        }, {});
        return new query_1.Query({
            filter: newFilter,
            sort: newSort,
            skip: query.skip,
            limit: query.limit
        });
    }
    return undefined;
}
exports.queryToSyncQuery = queryToSyncQuery;
var Sync = /** @class */ (function () {
    function Sync(collectionName, tag) {
        this.collectionName = collectionName;
        this.tag = tag;
    }
    Sync.prototype.isPushInProgress = function () {
        return pushInProgress.get(this.collectionName) === true;
    };
    Sync.prototype.find = function (providedQuery) {
        var syncCache = new cache_1.SyncCache(this.tag);
        var query = new query_1.Query(providedQuery).equalTo('collection', this.collectionName);
        return syncCache.find(query);
    };
    Sync.prototype.findById = function (id) {
        var syncCache = new cache_1.SyncCache(this.tag);
        return syncCache.findById(id);
    };
    Sync.prototype.count = function (providedQuery) {
        var syncCache = new cache_1.SyncCache(this.tag);
        var query = new query_1.Query(providedQuery).equalTo('collection', this.collectionName);
        return syncCache.count(query);
    };
    Sync.prototype.addCreateSyncEvent = function (docs) {
        return this.addSyncEvent(cache_1.SyncEvent.Create, docs);
    };
    Sync.prototype.addUpdateSyncEvent = function (docs) {
        return this.addSyncEvent(cache_1.SyncEvent.Update, docs);
    };
    Sync.prototype.addDeleteSyncEvent = function (docs) {
        return this.addSyncEvent(cache_1.SyncEvent.Delete, docs);
    };
    Sync.prototype.addSyncEvent = function (event, docs) {
        return __awaiter(this, void 0, void 0, function () {
            var syncCache, singular, syncDocs, docsToSync, docWithNoId, query;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        syncCache = new cache_1.SyncCache(this.tag);
                        singular = false;
                        syncDocs = [];
                        docsToSync = docs;
                        if (!Array.isArray(docs)) {
                            singular = true;
                            docsToSync = [docs];
                        }
                        if (!(docsToSync.length > 0)) return [3 /*break*/, 3];
                        docWithNoId = docsToSync.find(function (doc) { return !doc._id; });
                        if (docWithNoId) {
                            throw new sync_1.SyncError('A doc is missing an _id. All docs must have an _id in order to be added to the sync collection.');
                        }
                        query = new query_1.Query().contains('entityId', docsToSync.map(function (doc) { return doc._id; }));
                        return [4 /*yield*/, this.remove(query)];
                    case 1:
                        _a.sent();
                        // Don't add delete events for docs that were created offline
                        if (event === cache_1.SyncEvent.Delete) {
                            docsToSync = docsToSync.filter(function (doc) {
                                if (doc._kmd && doc._kmd.local === true) {
                                    return false;
                                }
                                return true;
                            });
                        }
                        return [4 /*yield*/, syncCache.save(docsToSync.map(function (doc) {
                                return {
                                    entityId: doc._id,
                                    entity: doc,
                                    collection: _this.collectionName,
                                    state: {
                                        operation: event
                                    }
                                };
                            }))];
                    case 2:
                        // Add sync events for the docs
                        syncDocs = _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, singular ? syncDocs.shift() : syncDocs];
                }
            });
        });
    };
    Sync.prototype.push = function (providedQuery, options) {
        return __awaiter(this, void 0, void 0, function () {
            var apiVersion, network, cache, syncCache, collectionQuery, queryForInsert, syncDocsForInsert, batchCreateEnabled, totalPushResults, batchCreateEntities, createEntity, updateEntity, deleteEntity, pushEntity, syncDocs, batchSize_1, i_1, batchPush_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.isPushInProgress()) {
                            throw new sync_1.SyncError('Data is already being pushed to the backend. Please wait for it to complete before pushing new data to the backend.');
                        }
                        apiVersion = kinvey_1.getApiVersion();
                        network = new networkstore_1.NetworkStore(this.collectionName);
                        cache = new cache_1.DataStoreCache(this.collectionName, this.tag);
                        syncCache = new cache_1.SyncCache(this.tag);
                        collectionQuery = new query_1.Query(providedQuery).equalTo('collection', this.collectionName);
                        queryForInsert = new query_1.Query(collectionQuery).equalTo('state.operation', cache_1.SyncEvent.Create);
                        return [4 /*yield*/, syncCache.find(queryForInsert)];
                    case 1:
                        syncDocsForInsert = _a.sent();
                        batchCreateEnabled = apiVersion >= 5 && syncDocsForInsert.length > 1;
                        totalPushResults = [];
                        batchCreateEntities = function () { return __awaiter(_this, void 0, void 0, function () {
                            var localIdsToRemove, entitiesForInsert, multiInsertResult, error_1, insertedEntities_1, idsToRemoveFromSyncCache_1, idsToRemoveFromCache_1;
                            var _this = this;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        localIdsToRemove = [];
                                        return [4 /*yield*/, Promise.all(syncDocsForInsert.map(function (doc, index) { return __awaiter(_this, void 0, void 0, function () {
                                                var entity;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0: return [4 /*yield*/, cache.findById(doc.entityId)];
                                                        case 1:
                                                            entity = _a.sent();
                                                            if (entity._kmd && entity._kmd.local === true) {
                                                                localIdsToRemove[index] = doc.entityId;
                                                                delete entity._id;
                                                                delete entity._kmd.local;
                                                            }
                                                            return [2 /*return*/, entity];
                                                    }
                                                });
                                            }); }))];
                                    case 1:
                                        entitiesForInsert = _a.sent();
                                        _a.label = 2;
                                    case 2:
                                        _a.trys.push([2, 4, , 5]);
                                        return [4 /*yield*/, network.create(entitiesForInsert, options)];
                                    case 3:
                                        multiInsertResult = _a.sent();
                                        return [3 /*break*/, 5];
                                    case 4:
                                        error_1 = _a.sent();
                                        // In case of a general batch insert error, do not break the push operation and aggregate all errors in the result
                                        if (options.catchGeneralErrors === true) {
                                            return [2 /*return*/, syncDocsForInsert.forEach(function (doc, index) {
                                                    totalPushResults.push({
                                                        _id: doc.entityId,
                                                        operation: cache_1.SyncEvent.Create,
                                                        entity: entitiesForInsert[index],
                                                        error: error_1
                                                    });
                                                })];
                                        }
                                        throw error_1;
                                    case 5:
                                        if (!(multiInsertResult.entities != null)) return [3 /*break*/, 8];
                                        insertedEntities_1 = [];
                                        idsToRemoveFromSyncCache_1 = [];
                                        idsToRemoveFromCache_1 = [];
                                        multiInsertResult.entities.forEach(function (insertedEntity, index) {
                                            if (insertedEntity == null) {
                                                return;
                                            }
                                            insertedEntities_1.push(insertedEntity);
                                            idsToRemoveFromSyncCache_1.push(syncDocsForInsert[index]._id);
                                            idsToRemoveFromCache_1.push(localIdsToRemove[index]);
                                            // Add the inserted entity to the end result
                                            totalPushResults.push({
                                                _id: syncDocsForInsert[index].entityId,
                                                operation: cache_1.SyncEvent.Create,
                                                entity: insertedEntity
                                            });
                                        });
                                        return [4 /*yield*/, Promise.all([
                                                syncCache.removeManyById(idsToRemoveFromSyncCache_1),
                                                cache.save(insertedEntities_1),
                                            ])];
                                    case 6:
                                        _a.sent();
                                        return [4 /*yield*/, cache.removeManyById(idsToRemoveFromCache_1)]; // Remove the original docs that were created
                                    case 7:
                                        _a.sent(); // Remove the original docs that were created
                                        _a.label = 8;
                                    case 8:
                                        // Process insert errors
                                        if (multiInsertResult.errors != null) {
                                            multiInsertResult.errors.forEach(function (insertError) {
                                                // Add the error to the end result and keep the order relative to other inserts
                                                totalPushResults.splice(insertError.index, 0, {
                                                    _id: syncDocsForInsert[insertError.index].entityId,
                                                    operation: cache_1.SyncEvent.Create,
                                                    entity: entitiesForInsert[insertError.index],
                                                    error: insertError
                                                });
                                            });
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        }); };
                        createEntity = function (syncDocId, entityId) { return __awaiter(_this, void 0, void 0, function () {
                            var doc, local, error_2;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, cache.findById(entityId)];
                                    case 1:
                                        doc = _a.sent();
                                        local = false;
                                        _a.label = 2;
                                    case 2:
                                        _a.trys.push([2, 8, , 9]);
                                        // Save the doc to the backend
                                        if (doc._kmd && doc._kmd.local === true) {
                                            local = true;
                                            // tslint:disable-next-line:no-delete
                                            delete doc._id;
                                            // tslint:disable-next-line:no-delete
                                            delete doc._kmd.local;
                                        }
                                        return [4 /*yield*/, network.create(doc, options)];
                                    case 3:
                                        doc = _a.sent();
                                        // Remove the sync doc
                                        return [4 /*yield*/, syncCache.removeById(syncDocId)];
                                    case 4:
                                        // Remove the sync doc
                                        _a.sent();
                                        // Save the doc to cache
                                        return [4 /*yield*/, cache.save(doc)];
                                    case 5:
                                        // Save the doc to cache
                                        _a.sent();
                                        if (!local) return [3 /*break*/, 7];
                                        return [4 /*yield*/, cache.removeById(entityId)];
                                    case 6:
                                        _a.sent();
                                        _a.label = 7;
                                    case 7: 
                                    // Return a result
                                    return [2 /*return*/, {
                                            _id: entityId,
                                            operation: cache_1.SyncEvent.Create,
                                            entity: doc
                                        }];
                                    case 8:
                                        error_2 = _a.sent();
                                        // Return a result with the error
                                        return [2 /*return*/, {
                                                _id: entityId,
                                                operation: cache_1.SyncEvent.Create,
                                                entity: doc,
                                                error: error_2
                                            }];
                                    case 9: return [2 /*return*/];
                                }
                            });
                        }); };
                        updateEntity = function (syncDocId, entityId) { return __awaiter(_this, void 0, void 0, function () {
                            var doc, error_3;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, cache.findById(entityId)];
                                    case 1:
                                        doc = _a.sent();
                                        _a.label = 2;
                                    case 2:
                                        _a.trys.push([2, 6, , 7]);
                                        return [4 /*yield*/, network.update(doc, options)];
                                    case 3:
                                        // Save the doc to the backend
                                        doc = _a.sent();
                                        // Remove the sync doc
                                        return [4 /*yield*/, syncCache.removeById(syncDocId)];
                                    case 4:
                                        // Remove the sync doc
                                        _a.sent();
                                        // Save the doc to cache
                                        return [4 /*yield*/, cache.save(doc)];
                                    case 5:
                                        // Save the doc to cache
                                        _a.sent();
                                        // Return a result
                                        return [2 /*return*/, {
                                                _id: entityId,
                                                operation: cache_1.SyncEvent.Update,
                                                entity: doc
                                            }];
                                    case 6:
                                        error_3 = _a.sent();
                                        // Return a result with the error
                                        return [2 /*return*/, {
                                                _id: entityId,
                                                operation: cache_1.SyncEvent.Update,
                                                entity: doc,
                                                error: error_3
                                            }];
                                    case 7: return [2 /*return*/];
                                }
                            });
                        }); };
                        deleteEntity = function (syncDocId, entityId) { return __awaiter(_this, void 0, void 0, function () {
                            var error_4, error_5;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 6, , 7]);
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        // Remove the doc from the backend
                                        return [4 /*yield*/, network.removeById(entityId, options)];
                                    case 2:
                                        // Remove the doc from the backend
                                        _a.sent();
                                        return [3 /*break*/, 4];
                                    case 3:
                                        error_4 = _a.sent();
                                        // Rethrow the error if it is not a NotFoundError
                                        if (!(error_4 instanceof notFound_1.NotFoundError)) {
                                            throw error_4;
                                        }
                                        return [3 /*break*/, 4];
                                    case 4: 
                                    // Remove the sync doc
                                    return [4 /*yield*/, syncCache.removeById(syncDocId)];
                                    case 5:
                                        // Remove the sync doc
                                        _a.sent();
                                        // Return a result
                                        return [2 /*return*/, {
                                                _id: entityId,
                                                operation: cache_1.SyncEvent.Delete
                                            }];
                                    case 6:
                                        error_5 = _a.sent();
                                        // Return a result with the error
                                        return [2 /*return*/, {
                                                _id: entityId,
                                                operation: cache_1.SyncEvent.Delete,
                                                error: error_5
                                            }];
                                    case 7: return [2 /*return*/];
                                }
                            });
                        }); };
                        pushEntity = function (syncDoc) { return __awaiter(_this, void 0, void 0, function () {
                            var _id, entityId, _a, state;
                            return __generator(this, function (_b) {
                                _id = syncDoc._id, entityId = syncDoc.entityId, _a = syncDoc.state, state = _a === void 0 ? { operation: undefined } : _a;
                                switch (state.operation) {
                                    case cache_1.SyncEvent.Create: {
                                        if (batchCreateEnabled) {
                                            return [2 /*return*/, null]; // Inserts must have already been batched
                                        }
                                        return [2 /*return*/, createEntity(_id, entityId)];
                                    }
                                    case cache_1.SyncEvent.Update: {
                                        return [2 /*return*/, updateEntity(_id, entityId)];
                                    }
                                    case cache_1.SyncEvent.Delete: {
                                        return [2 /*return*/, deleteEntity(_id, entityId)];
                                    }
                                    default: {
                                        return [2 /*return*/, {
                                                _id: _id,
                                                operation: state.operation,
                                                error: new Error('Unable to push item in sync table because the event was not recognized.')
                                            }];
                                    }
                                }
                                return [2 /*return*/];
                            });
                        }); };
                        if (!batchCreateEnabled) return [3 /*break*/, 5];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, , 4, 5]);
                        markPushStart(this.collectionName);
                        return [4 /*yield*/, batchCreateEntities()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        markPushEnd(this.collectionName);
                        return [7 /*endfinally*/];
                    case 5: return [4 /*yield*/, syncCache.find(collectionQuery)];
                    case 6:
                        syncDocs = _a.sent();
                        if (!(syncDocs.length > 0)) return [3 /*break*/, 8];
                        batchSize_1 = 100;
                        i_1 = 0;
                        batchPush_1 = function () { return __awaiter(_this, void 0, void 0, function () {
                            var batch;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (i_1 >= syncDocs.length) {
                                            return [2 /*return*/];
                                        }
                                        batch = syncDocs.slice(i_1, i_1 + batchSize_1);
                                        i_1 += batchSize_1;
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, , 3, 4]);
                                        markPushStart(this.collectionName);
                                        return [4 /*yield*/, Promise.all(batch.map(function (syncDoc) { return pushEntity(syncDoc)
                                                .then(function (pushResult) {
                                                if (pushResult != null) {
                                                    totalPushResults.push(pushResult);
                                                }
                                            }); }))];
                                    case 2:
                                        _a.sent();
                                        return [3 /*break*/, 4];
                                    case 3:
                                        markPushEnd(this.collectionName);
                                        return [7 /*endfinally*/];
                                    case 4: 
                                    // Push remaining docs
                                    return [2 /*return*/, batchPush_1()];
                                }
                            });
                        }); };
                        return [4 /*yield*/, batchPush_1()];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [2 /*return*/, totalPushResults];
                }
            });
        });
    };
    Sync.prototype.remove = function (providedQuery) {
        return __awaiter(this, void 0, void 0, function () {
            var syncCache, query;
            return __generator(this, function (_a) {
                syncCache = new cache_1.SyncCache(this.tag);
                query = new query_1.Query(providedQuery).equalTo('collection', this.collectionName);
                return [2 /*return*/, syncCache.remove(query)];
            });
        });
    };
    Sync.prototype.removeById = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var syncCache;
            return __generator(this, function (_a) {
                syncCache = new cache_1.SyncCache(this.tag);
                return [2 /*return*/, syncCache.removeById(id)];
            });
        });
    };
    Sync.prototype.clear = function () {
        return __awaiter(this, void 0, void 0, function () {
            var syncCache, query;
            return __generator(this, function (_a) {
                syncCache = new cache_1.SyncCache(this.tag);
                query = new query_1.Query().equalTo('collection', this.collectionName);
                return [2 /*return*/, syncCache.remove(query)];
            });
        });
    };
    return Sync;
}());
exports.Sync = Sync;
//# sourceMappingURL=sync.js.map